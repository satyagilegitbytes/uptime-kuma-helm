name: Helm Image Vulnerability Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # 2. Set up Helm
    - name: Set up Helm
      uses: azure/setup-helm@v1

    # 3. Install Trivy
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.35.0/trivy_0.35.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.35.0_Linux-64bit.deb

    # 4. Cache Trivy DB
    - name: Cache Trivy DB
      uses: actions/cache@v2
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-${{ hashFiles('**/*.yaml', '**/*.yml') }}
        restore-keys: |
          trivy-db-${{ runner.os }}-

    # 5. List files for debugging
    - name: List repository files
      run: ls -R

    # 6. Extract the image repository and tag
    - name: Extract image from values.yaml
      id: extract_image
      run: |
        IMAGE_REPO=$(grep -oP 'repository:\s*\K\S+' charts/uptime-kuma/values.yaml || echo "not_found")
        IMAGE_TAG=$(grep -oP 'tag:\s*\K\S+' charts/uptime-kuma/values.yaml || echo "latest")
        if [[ "$IMAGE_REPO" == "not_found" ]]; then
          echo "Error: IMAGE_REPO not found in values.yaml"
          exit 1
        fi
        echo "IMAGE=${IMAGE_REPO}:${IMAGE_TAG}" >> $GITHUB_ENV

    # 7. Debug extracted image
    - name: Debug extracted image values
      run: |
        echo "IMAGE_REPO: ${{ env.IMAGE_REPO }}"
        echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
        echo "IMAGE: ${{ env.IMAGE }}"

    # 8. Scan image with Trivy and save results as JSON
    - name: Scan image with Trivy
      id: scan_image
      run: |
        echo "Scanning image ${{ env.IMAGE }} for vulnerabilities..."
        trivy image --severity HIGH,CRITICAL --exit-code 0 --no-progress --format json --output trivy-scan-results.json ${{ env.IMAGE }}

    # 9. Display Trivy scan results
    - name: Display Trivy Scan Results
      run: |
        echo "Trivy scan completed for image ${{ env.IMAGE }}."
        cat trivy-scan-results.json

    # 10. Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # 11. Install dependencies (pandas and openpyxl)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas openpyxl

    # 12. Run the Python script to convert JSON to Excel
    - name: Convert JSON to Excel
      run: |
        python json_to_excel.py  # Assumes json_to_excel.py is in the root directory

    # 13. Upload the scan results file as an artifact
    - name: Upload Trivy Scan Results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-scan-results
        path: trivy-scan-results.json

    # 14. Create a Jira ticket if vulnerabilities are found
    - name: Create Jira Issue for vulnerabilities
      if: always()
      env:
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        VULNERABILITIES=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")' trivy-scan-results.json)
        if [ -z "$VULNERABILITIES" ]; then
          echo "No high or critical vulnerabilities found."
          exit 0
        fi
        ISSUE_BODY="### Vulnerabilities detected in the image:
        \`\`\`
        $VULNERABILITIES
        \`\`\`
        Please review and resolve the identified issues."
        curl -X POST \
          -H "Content-Type: application/json" \
          -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
          --data '{
            "fields": {
              "project": {
                "key": "YOUR_PROJECT_KEY"
              },
              "summary": "Vulnerability Scan Results for '"${{ env.IMAGE }}"'",
              "description": "'"$ISSUE_BODY"'",
              "issuetype": {
                "name": "Bug"
              }
            }
          }' \
          $JIRA_URL/rest/api/2/issue/
